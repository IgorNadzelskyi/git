{
	"info": {
		"_postman_id": "5bcf44c3-0d64-4c37-a743-57aff27cb4be",
		"name": "HW_2.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Status 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Проверить, что в body приходит правильный string.",
							"pm.test(\"Body is string\", function () {",
							"  pm.response.to.have.body(\"This is the first responce from server!\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first\n",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" //Спарсить response body в json.",
							"",
							" var jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Проверить, что name в ответе равно name s request ",
							"pm.test (\"User name\", function (){",
							"    var jsonData =pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"igor\");",
							"});",
							"  ",
							"",
							"",
							"//Проверить, что age в ответе равно age s request",
							"pm.test (\"User age\", function (){",
							"    var jsonData =pm.response.json();",
							"    pm.expect(jsonData.age).to.eql(\"25\");",
							"});",
							"",
							"//Проверить, что salary в ответе равно salary s request ",
							"pm.test (\"User salary\", function (){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.salary).to.eql(5000);",
							"});",
							"",
							"    //Спарсить request.",
							"    ",
							"var requestBody = request.data;",
							"console.log(requestBody);",
							"",
							"//Проверить, что name в ответе равно name s request ",
							"",
							"pm.test (\"User name response = name request\", function () {",
							"    pm.expect(jsonData.name).to.eql(requestBody.name);",
							"});",
							"",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test (\"User age response = age request\", function() {",
							"    pm.expect(jsonData.age).to.eql(requestBody.age);",
							"});",
							"",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"User salary response = salary request\", function (){",
							"    pm.expect(jsonData.salary).to.eql(5000);",
							"});",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"var jsonData = pm.response.json();",
							"    console.log(\"Parametr famaly== \"  , jsonData.family)",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"salary_1_5_year  response = salary*4  request\", function (){",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(requestBody.salary*4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "igor",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3\n",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"",
							"//4. Спарсить request.",
							"var reqParams = pm.request.url.query.toObject();",
							"",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test (\"User name\", function (){",
							"    pm.expect(jsonData.name).to.eql(reqParams.name);",
							"});",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test (\"User age\", function (){",
							"    pm.expect(jsonData.age).to.eql(reqParams.age);",
							"});",
							"",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"var reqSalary = +reqParams.salary;",
							"pm.test (\"User salary\", function (){",
							"    pm.expect(jsonData.salary).to.equal(reqSalary);",
							"});",
							"",
							"//8. Вывести в консоль параметр family из response.",
							"var jsonData = pm.response.json();",
							"    console.log(\"Parametr famaly== \"  , jsonData.family)",
							"",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"the dog has name\", function () { ",
							"    pm.expect(pm.response.json(\"dog\")). to.have.property(\"name\"); ",
							"});",
							"",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"the dog has age\", function () { ",
							"    pm.expect(pm.response.json(\"dog\")). to.have.property(\"age\"); ",
							"});",
							"",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"the name has Luky\", function () { ",
							"    pm.expect(jsonData.family.pets.dog.name). to.eql(\"Luky\"); ",
							"});",
							"",
							"",
							"//12. Проверить, что параметр age имеет значение 4.",
							"pm.test (\"age = 4\", function() {",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3\n?age=25&name=Igor&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3\n"
					],
					"query": [
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "name",
							"value": "Igor"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"",
							"//4. Спарсить request.",
							"var reqParams = pm.request.url.query.toObject();",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.",
							"pm.test (\"User age\", function (){",
							"    pm.expect(jsonData.name).to.eql(reqParams.name);",
							"});",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"",
							"pm.test (\"User age\", function (){",
							"  pm.expect(jsonData.age).to.eql(+reqParams.age);",
							"});",
							"",
							"//7. Вывести в консоль параметр salary из request.",
							"",
							"    console.log(\"Parametr salary req== \"  , reqParams.salary);",
							"",
							"//8. Вывести в консоль параметр salary из response.",
							"",
							"console.log (\"Parametr salary resp==\" , jsonData.salary);",
							"",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"var resp_salary= jsonData.salary[0];",
							"console.log(\" salary==5000 \", resp_salary);",
							"",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"",
							"var resp_salary= jsonData.salary[1];",
							"console.log(\" salary==10000 \", resp_salary);",
							"",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"",
							"var resp_salary= jsonData.salary[2];",
							"console.log(\" salary==15000 \", resp_salary);",
							"",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"var request_salary = +pm.request.url.query.get(\"salary\")",
							"var resp_salary= jsonData.salary[0];",
							"pm.test (\"Your salary =5000\", function (){",
							"  pm.expect(resp_salary).to.eql(request_salary);",
							"});",
							"",
							"",
							"",
							"",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"var request_salary = +pm.request.url.query.get(\"salary\")",
							"var resp_salary= +jsonData.salary[1];",
							"pm.test (\"salary responsse[1]=salary in request*2\", function (){",
							"  pm.expect(resp_salary).to.eql(request_salary*2);",
							"});",
							"",
							"",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"",
							"var request_salary = +pm.request.url.query.get(\"salary\")",
							"var resp_salary= +jsonData.salary[2];",
							"pm.test (\"salary responsse[2]=salary in request*3\", function (){",
							"  pm.expect(resp_salary).to.eql(request_salary*3);",
							"});",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"var json_resp = JSON.parse(responseBody);",
							"var salary = json_resp.salary",
							"for (var i=0; i<salary.length; i++){",
							"    console.log( salary[i])",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4\n?age=25&name=Igor&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4\n"
					],
					"query": [
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "name",
							"value": "Igor"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request",
							"//2. Вставить параметр age из окружения в age",
							"//3. Вставить параметр name из окружения в name",
							"//4. Отправить запрос.",
							"",
							"//5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"///6. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"//7. Спарсить request.",
							"var req_Body = pm.request.url.query.toObject();",
							"",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"",
							"//var json_resp = JSON.parse(responseBody);",
							"//pm.test(\"the respons  start_qa_salary\", function () { ",
							"   // pm.expect(pm.jsonData. to.have.property(\"start_qa_salary\"));",
							"});",
							"",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"///11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"//13. Проверить, что json response имеет параметр person",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"///16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"///18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"///19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"///21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": " {{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}